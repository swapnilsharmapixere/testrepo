
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model DataCollectionPRJ.Entity.ViewModels.Dashboard.DashboardViewmodel
<div class="row">
    <div class="col-md-6 col-sm-6 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Pie Graph</h2>
                <ul class="nav navbar-right panel_toolbox">
                    <li>
                        <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                    </li>
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false"><i class="fa fa-wrench"></i></a>
                        <ul class="dropdown-menu" role="menu">
                            <li>
                                <a href="#">Settings 1</a>
                            </li>
                            <li>
                                <a href="#">Settings 2</a>
                            </li>
                        </ul>
                    </li>
                    <li>
                        <a class="close-link"><i class="fa fa-close"></i></a>
                    </li>
                </ul>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                <div id="chartdiv" style="height:350px;"></div>
            </div>
        </div>
    </div>
    <div class="col-md-6 col-sm-6 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Line Graph</h2>
                <ul class="nav navbar-right panel_toolbox">
                    <li>
                        <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                    </li>
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false"><i class="fa fa-wrench"></i></a>
                        <ul class="dropdown-menu" role="menu">
                            <li>
                                <a href="#">Settings 1</a>
                            </li>
                            <li>
                                <a href="#">Settings 2</a>
                            </li>
                        </ul>
                    </li>
                    <li>
                        <a class="close-link"><i class="fa fa-close"></i></a>
                    </li>
                </ul>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                <div id="echart_line" style="height:350px;"></div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6 col-sm-6 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Default Example <small>Users</small></h2>
                <ul class="nav navbar-right panel_toolbox">
                    <li>
                        <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                    </li>
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false"><i class="fa fa-wrench"></i></a>
                        <ul class="dropdown-menu" role="menu">
                            <li>
                                <a href="#">Settings 1</a>
                            </li>
                            <li>
                                <a href="#">Settings 2</a>
                            </li>
                        </ul>
                    </li>
                    <li>
                        <a class="close-link"><i class="fa fa-close"></i></a>
                    </li>
                </ul>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                <p class="text-muted font-13 m-b-30">
                    DataTables has most features enabled by default, so all you need to do to use it with your own tables is to call the construction function: <code>$().DataTable();</code>
                </p>
                <table id="datatable-buttons" class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Name</th>
                           <th>Location</th>
                            <th>Flow</th>
                            <th>Date</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var row in Model.WellData)
                        {
                        <tr>
                            <td><a href="javascript:google.maps.event.trigger(gmarkers['+@row.Name+'],'click');" class="button3">@row.Name</a></td>
                            <td>@row.Location</td>
                            <td>@row.Flow</td>
                            <td>@row.date</td>
                         
                        </tr>
                        }
                        </tbody>
</table>
            </div>
        </div>
    </div>
    <div class="col-md-6 col-sm-6 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Other Graph types <small> Assorted graph types</small></h2>
                <ul class="nav navbar-right panel_toolbox">
                    <li>
                        <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                    </li>
                    <li>
                        <a class="DownloadMapPDF"><i class="fa fa-download"></i></a>
                      
                    </li>
                    <li>
                        <a class="close-link"><i class="fa fa-close"></i></a>
                    </li>
                </ul>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                <div class="row">
                    <div class="col-md-12" style="padding: 30px">
                        <p>USA Vector Map</p>
                        <div id="map_wrapper">
                            <div id="map_canvas" class="mapping"></div>
                        </div>
                    </div>

                </div>



            </div>
        </div>
    </div>
</div>




@section css{
    <style>
        #map_wrapper {
            height: 400px;
        }

        #map_canvas {
            width: 100%;
            height: 100%;
        }
    </style>
    <!-- Datatables -->
    <link href="~/vendors/datatables.net-bs/css/dataTables.bootstrap.min.css" rel="stylesheet">
    <link href="~/vendors/datatables.net-buttons-bs/css/buttons.bootstrap.min.css" rel="stylesheet">
    <link href="~/vendors/datatables.net-fixedheader-bs/css/fixedHeader.bootstrap.min.css" rel="stylesheet">
    <link href="~/vendors/datatables.net-responsive-bs/css/responsive.bootstrap.min.css" rel="stylesheet">
    <link href="~/vendors/datatables.net-scroller-bs/css/scroller.bootstrap.min.css" rel="stylesheet">


    @*Chart*@
    <link href="https://www.amcharts.com/lib/3/plugins/export/export.css" media="all" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="https://www.amcharts.com/lib/3/plugins/export/export.css" type="text/css" media="all" />
}


@section script{

    <!-- ECharts -->
    <script src="https://www.amcharts.com/lib/3/amcharts.js"></script>
    <script src="https://www.amcharts.com/lib/3/pie.js"></script>
    <script src="https://www.amcharts.com/lib/3/plugins/animate/animate.min.js"></script>
    <script src="https://www.amcharts.com/lib/3/plugins/export/export.min.js"></script>
    <script src="https://www.amcharts.com/lib/3/themes/light.js"></script>
    <script src="https://www.amcharts.com/lib/3/serial.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.38/pdfmake.min.js" integrity="sha256-nKIeEnSGXAp7Av9BxQaCFNMgYRVjfMCxY7yK02quQno=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.38/vfs_fonts.js" integrity="sha256-XLgfpwdUBwR1k46YWTWaJoEiybYsrBVOu44SDoEmYsw=" crossorigin="anonymous"></script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.js"></script>

    <!-- Datatables -->
    <script src="~/vendors/datatables.net/js/jquery.dataTables.min.js"></script>
    <script src="~/vendors/datatables.net-bs/js/dataTables.bootstrap.min.js"></script>
    <script src="~/vendors/datatables.net-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/vendors/datatables.net-buttons-bs/js/buttons.bootstrap.min.js"></script>
    <script src="~/vendors/datatables.net-buttons/js/buttons.flash.min.js"></script>
    <script src="~/vendors/datatables.net-buttons/js/buttons.html5.min.js"></script>
    <script src="~/vendors/datatables.net-buttons/js/buttons.print.min.js"></script>
    <script src="~/vendors/datatables.net-fixedheader/js/dataTables.fixedHeader.min.js"></script>
    <script src="~/vendors/datatables.net-keytable/js/dataTables.keyTable.min.js"></script>
    <script src="~/vendors/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/vendors/datatables.net-responsive-bs/js/responsive.bootstrap.js"></script>
    <script src="~/vendors/datatables.net-scroller/js/dataTables.scroller.min.js"></script>
    <script src="~/vendors/jszip/dist/jszip.min.js"></script>

    <script type="text/javascript">
        jQuery(function ($) {
            // Asynchronously Load the map API
            var script = document.createElement('script');
            script.src = "//maps.googleapis.com/maps/api/js?key=AIzaSyD2-5GLy2PNXSBRynvoqi-GdXb4cbXH92E&callback=initialize";
            document.body.appendChild(script);
        });
        $(document).ready(function () {
            $(".DownloadMapPDF").click(function () {
                html2canvas(document.getElementById("map_canvas"),
                    {

                        useCORS: true,

                        onrendered: function (canvas) {

                            var img = canvas.toDataURL("image/png");

                            img = img.replace('data:image/png;base64,', '');

                            MapImage = 'data:image/png;base64,' + img;

                            var docDefinition = {
                                content: [

                                  {
                                      "image": MapImage,
                                      "fit": [523, 300]
                                  }
                                ]
                            };
                            pdfMake.createPdf(docDefinition).download('GoogleMap.pdf');

                            return false;
                        }
                    });
            });
        });
        var locations = [];
       @foreach (var r in Model.DashboardWellMarkers)
   {
      <text>
        locations.push(["@r.Name", "@r.Location", "@r.Latitute", "@r.Longtitute"]);
      </text>
   }
        console.log(locations);
        function initialize() {


            var locations1 = [
       [
       "Name 1",
        "215 West Girard Avenue 19123",
       "39.9695601",
       "-75.1395161 test 1"
       ],
       [
       "Name 2",
       "5360 Old York Road 19141",
       "40.034038",
       "-75.145223"
       ],
       [
       "Name 3",
       "1350 W Girard Avenue 19123",
       "39.9713524",
       "-75.1590360"
       ]
            ];

            console.log(locations1);

            gmarkers = [];

            var map = new google.maps.Map(document.getElementById('map_canvas'), {
                zoom: 12,
                center: new google.maps.LatLng(39.9995601, -75.1395161),
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });

            var infowindow = new google.maps.InfoWindow();


            function createMarker(latlng, html) {
                var marker = new google.maps.Marker({
                    position: latlng,
                    map: map
                });

                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.setContent(html);
                    infowindow.open(map, marker);
                });
                return marker;
            }

            for (var i = 0; i < locations.length; i++) {
                gmarkers[locations[i][0]] =
                    createMarker(new google.maps.LatLng(locations[i][2], locations[i][3]), locations[i][0] + "<br>" + locations[i][1]);
            }
        }


        var MapImage = "";
        var TableImage = "";

        var chart = AmCharts.makeChart("chartdiv", {
            "type": "pie",
            "theme": "light",
            "dataProvider": [{
                "country": "Belgium",
                "litres": 60
            }, {
                "country": "The Netherlands",
                "litres": 50
            }],
            "valueField": "litres",
            "titleField": "country",
            "balloon": {
                "fixedPosition": true
            },
            "export": {
                "enabled": true
            }
        });

        var Linechart = AmCharts.makeChart("echart_line", {
            "type": "serial",
            "theme": "light",
            "dataProvider": [{
                "category": "Monday:\nWeek 20\nWeek 21",
                "value1": 2025,
                "value2": 1800
            }, {
                "category": "Tuesday:\nWeek 20\nWeek 21",
                "value1": 1863,
                "value2": 1951
            }, {
                "category": "Wednesday:\nWeek 20\nWeek 21",
                "value1": 1610,
                "value2": 950
            }, {
                "category": "Thursday:\nWeek 20\nWeek 21",
                "value1": 1732,
                "value2": 1250
            }, {
                "category": "Friday:\nWeek 20\nWeek 21",
                "value1": 1123,
                "value2": 765
            }, {
                "category": "Saturday:\nWeek 20\nWeek 21",
                "value1": 985,
                "value2": 841
            }, {
                "category": "Sunday:\nWeek 20\nWeek 21",
                "value1": 1400,
                "value2": 1300
            }],
            "valueAxes": [{
                "gridColor": "#FFFFFF",
                "gridAlpha": 0.2,
                "dashLength": 0
            }],
            "gridAboveGraphs": true,
            "startDuration": 1,
            "graphs": [{
                "title": "Week #20",
                "balloonText": "[[title]]: <b>[[value]]</b>",
                "bullet": "round",
                "bulletSize": 10,
                "bulletBorderColor": "#ffffff",
                "bulletBorderAlpha": 1,
                "bulletBorderThickness": 2,
                "valueField": "value1"
            }, {
                "title": "Week #21",
                "balloonText": "[[title]]: <b>[[value]]</b>",
                "bullet": "round",
                "bulletSize": 10,
                "bulletBorderColor": "#ffffff",
                "bulletBorderAlpha": 1,
                "bulletBorderThickness": 2,
                "valueField": "value2"
            }],
            "chartCursor": {
                "categoryBalloonEnabled": false,
                "cursorAlpha": 0,
                "zoomable": false
            },
            "categoryField": "category",
            "categoryAxis": {
                "gridPosition": "start",
                "gridAlpha": 0
            },
            "legend": {},
            "export": {
                "enabled": true
            }
        });


        function exportCharts() {

            // So that we know export was started
            console.log("Starting export...");

            // Define IDs of the charts we want to include in the report
            var ids = ["chartdiv", "echart_line"];

            // Collect actual chart objects out of the AmCharts.charts array
            var charts = {}
            var charts_remaining = ids.length;

            for (var i = 0; i < ids.length; i++) {
                for (var x = 0; x < AmCharts.charts.length; x++) {
                    if (AmCharts.charts[x].div.id == ids[i])
                        charts[ids[i]] = AmCharts.charts[x];
                }
            }

            // Trigger export of each chart
            for (var x in charts) {
                if (charts.hasOwnProperty(x)) {
                    var chart = charts[x];
                    chart["export"].capture({}, function () {
                        this.toPNG({}, function (data) {

                            // Save chart data into chart object itself
                            this.setup.chart.exportedImage = data;

                            // Reduce the remaining counter
                            charts_remaining--;

                            // Check if we got all of the charts
                            if (charts_remaining == 0) {
                                // Yup, we got all of them
                                // Let's proceed to putting PDF together
                                convertMapasbinaryimage();




                            }

                        });
                    });
                }
            }



            function convertMapasbinaryimage() {

                html2canvas(document.getElementById("map_canvas"),
                    {

                        useCORS: true,

                        onrendered: function (canvas) {

                            var img = canvas.toDataURL("image/png");

                            img = img.replace('data:image/png;base64,', '');

                            MapImage = 'data:image/png;base64,' + img;

                            convertTableasbinaryimage();

                            return false;
                        }
                    });
            }
            function convertTableasbinaryimage() {

                html2canvas(document.getElementById("datatable-buttons"),
                    {

                        useCORS: true,

                        onrendered: function (canvas) {

                            var img = canvas.toDataURL("image/png");

                            img = img.replace('data:image/png;base64,', '');

                            TableImage = 'data:image/png;base64,' + img;


                            generatePDF(MapImage, TableImage)
                            return false;
                        }
                    });
            }
            function generatePDF(MapImage, TableImage) {
                // Log
                console.log("Generating PDF...");

                var docDefinition = {
                    content: [
                      {
                          "image": charts["chartdiv"].exportedImage,
                          "fit": [523, 300]
                      },
                      {
                          "image": charts["echart_line"].exportedImage,
                          "fit": [523, 300]
                      },
                      {
                          "image": TableImage,
                          "fit": [523, 300]
                      },
                      {
                          "image": MapImage,
                          "fit": [523, 300]
                      }
                    ]
                };
                pdfMake.createPdf(docDefinition).download('Dashboard.pdf');
            }


        }
    </script>
}
